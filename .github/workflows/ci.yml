name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Ruff linting
        run: |
          echo "::group::Ruff Linting"
          ruff check . --output-format=github
          echo "::endgroup::"

      - name: Run Ruff formatting check
        run: |
          echo "::group::Ruff Format Check"
          ruff format --check .
          echo "::endgroup::"

      - name: Run Black formatting check
        run: |
          echo "::group::Black Format Check"
          black --check --diff .
          echo "::endgroup::"

      - name: Run MyPy type checking
        run: |
          echo "::group::MyPy Type Checking"
          mypy . --ignore-missing-imports --show-error-codes
          echo "::endgroup::"
        continue-on-error: true  # Type checking is advisory for now

      - name: Run Bandit security check
        run: |
          echo "::group::Bandit Security Check"
          bandit -r . -f json -o bandit-results.json || true
          bandit -r . --exclude ./tests,./generated_reports,./cache,./prompt_versions
          echo "::endgroup::"

      - name: Upload Bandit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-results
          path: bandit-results.json

  # Multi-version testing
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Test imports and basic functionality
        run: |
          echo "::group::Import Tests"
          python -c "import config; print('‚úì config module')"
          python -c "import utils; print('‚úì utils package')"
          python -c "import prompts; print('‚úì prompts package')"
          python -c "from utils.prompt_versioning import PromptVersionManager; print('‚úì prompt versioning')"
          python -c "from utils.search_cache import SearchCache; print('‚úì search cache')"
          python -c "from utils.token_manager import TokenManager; print('‚úì token manager')"
          python -c "from utils.json_parser import RobustJSONParser; print('‚úì json parser')"
          echo "::endgroup::"

      - name: Test CLI tools
        run: |
          echo "::group::CLI Tests"
          python main.py --help || echo "Main CLI help check"
          python prompt_cli.py --help || echo "Prompt CLI help check"
          echo "::endgroup::"

      - name: Test configuration loading
        run: |
          echo "::group::Configuration Tests"
          python -c "
          from config import get_config
          config = get_config('business')
          print(f'‚úì Template: {config.get_prompt_template()}')
          print(f'‚úì Settings loaded: {len(config.settings)} items')
          "
          echo "::endgroup::"

  # Integration tests (with mock APIs)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality]
    env:
      ANTHROPIC_API_KEY: "dummy-key-for-testing"
      TAVILY_API_KEY: "dummy-key-for-testing"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Test prompt versioning system
        run: |
          echo "::group::Prompt Versioning Tests"
          python -c "
          from utils.prompt_versioning import PromptVersionManager
          manager = PromptVersionManager('test_versions', 'test_usage.json')
          success = manager.add_prompt_version('TEST_PROMPT', 'v1.0', 'Test prompt: {topic}', 'Test version')
          print(f'‚úì Add version: {success}')
          prompt = manager.get_prompt('TEST_PROMPT', 'v1.0')
          print(f'‚úì Get prompt: {prompt is not None}')
          "
          echo "::endgroup::"

      - name: Test caching system
        run: |
          echo "::group::Cache System Tests"
          python -c "
          from utils.search_cache import SearchCache
          cache = SearchCache('test_cache', ttl_hours=1)
          cache.set('test_query', ['result1', 'result2'])
          result = cache.get('test_query')
          print(f'‚úì Cache set/get: {result is not None}')
          "
          echo "::endgroup::"

      - name: Test token management
        run: |
          echo "::group::Token Management Tests"
          python -c "
          from utils.token_manager import TokenManager
          manager = TokenManager(model='claude-3-5-sonnet-20240620')
          optimized = manager.optimize_source_content(['Long content here'] * 10, 'business')
          print(f'‚úì Token optimization: {len(optimized)} items')
          "
          echo "::endgroup::"

      - name: Clean up test files
        run: |
          rm -rf test_versions test_cache
          rm -f test_usage.json

  # Documentation and examples
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README
        run: |
          echo "::group::README Check"
          if [ -f README.md ]; then
            echo "‚úì README.md exists"
            wc -l README.md
          else
            echo "‚ùå README.md missing"
            exit 1
          fi
          echo "::endgroup::"

      - name: Check required files
        run: |
          echo "::group::Required Files Check"
          required_files=(
            "pyproject.toml"
            ".pre-commit-config.yaml"
            ".gitignore"
            "main.py"
            "config.py"
            "report_generator.py"
          )

          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úì $file exists"
            else
              echo "‚ùå $file missing"
              exit 1
            fi
          done
          echo "::endgroup::"

      - name: Validate pyproject.toml
        run: |
          echo "::group::pyproject.toml Validation"
          python -c "
          import tomllib
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          print(f'‚úì Valid TOML with {len(data)} sections')
          if 'project' in data:
              print(f'‚úì Project name: {data[\"project\"][\"name\"]}')
              print(f'‚úì Project version: {data[\"project\"][\"version\"]}')
          "
          echo "::endgroup::"

  # Final status check
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [quality, test, integration, docs]
    if: always()
    steps:
      - name: Check overall status
        run: |
          if [[ "${{ needs.quality.result }}" == "success" &&
                "${{ needs.test.result }}" == "success" &&
                "${{ needs.integration.result }}" == "success" &&
                "${{ needs.docs.result }}" == "success" ]]; then
            echo "üéâ All CI checks passed!"
            exit 0
          else
            echo "‚ùå Some CI checks failed:"
            echo "  Quality: ${{ needs.quality.result }}"
            echo "  Tests: ${{ needs.test.result }}"
            echo "  Integration: ${{ needs.integration.result }}"
            echo "  Docs: ${{ needs.docs.result }}"
            exit 1
          fi
